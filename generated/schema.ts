// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class issuet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save issuet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save issuet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("issuet", id.toString(), this);
  }

  static load(id: string): issuet | null {
    return store.get("issuet", id) as issuet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class redeemt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save redeemt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save redeemt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("redeemt", id.toString(), this);
  }

  static load(id: string): redeemt | null {
    return store.get("redeemt", id) as redeemt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class deprecatet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save deprecatet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save deprecatet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("deprecatet", id.toString(), this);
  }

  static load(id: string): deprecatet | null {
    return store.get("deprecatet", id) as deprecatet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class paramst extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save paramst entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save paramst entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("paramst", id.toString(), this);
  }

  static load(id: string): paramst | null {
    return store.get("paramst", id) as paramst | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class destroyedblackfundst extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save destroyedblackfundst entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save destroyedblackfundst entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("destroyedblackfundst", id.toString(), this);
  }

  static load(id: string): destroyedblackfundst | null {
    return store.get("destroyedblackfundst", id) as destroyedblackfundst | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class addedblacklistt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save addedblacklistt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save addedblacklistt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("addedblacklistt", id.toString(), this);
  }

  static load(id: string): addedblacklistt | null {
    return store.get("addedblacklistt", id) as addedblacklistt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class removedblacklistt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save removedblacklistt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save removedblacklistt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("removedblacklistt", id.toString(), this);
  }

  static load(id: string): removedblacklistt | null {
    return store.get("removedblacklistt", id) as removedblacklistt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class approvalt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save approvalt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save approvalt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("approvalt", id.toString(), this);
  }

  static load(id: string): approvalt | null {
    return store.get("approvalt", id) as approvalt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class transfert extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save transfert entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save transfert entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("transfert", id.toString(), this);
  }

  static load(id: string): transfert | null {
    return store.get("transfert", id) as transfert | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class pauset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save pauset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save pauset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("pauset", id.toString(), this);
  }

  static load(id: string): pauset | null {
    return store.get("pauset", id) as pauset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class unpauset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save unpauset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save unpauset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("unpauset", id.toString(), this);
  }

  static load(id: string): unpauset | null {
    return store.get("unpauset", id) as unpauset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
